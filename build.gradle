plugins {
  id "com.github.ben-manes.versions" version "0.46.0"
  id 'java'
  id 'application'
  id 'maven-publish'
  id 'signing'
  id 'eclipse'
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots' }
}

group = 'io.calimero'
version = '3.0-SNAPSHOT'

def date() {
    new Date().format('yyyyMMdd')
}

def buildClassifier = date()
distZip.archiveClassifier = buildClassifier
distTar.archiveClassifier = buildClassifier

sourceCompatibility = 17
targetCompatibility = 17

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'
javadoc.options.encoding = 'UTF-8'


application {
    mainModule = 'io.calimero.gui' 
    mainClass = 'io.calimero.gui.SwtChecker'
}

// SWT is platform dependent
def swtGroupId = 'org.eclipse.platform'
def swtVersion = '3.123.0'
def swtArtifact = 'org.eclipse.swt.'

def os = System.getProperty("os.name").toLowerCase(Locale.ENGLISH)
if (os.contains("windows")) { swtArtifact += 'win32.win32.' }
else if (os.contains("linux")) { swtArtifact += 'gtk.linux.' }
else if (os.contains("mac")) { swtArtifact += 'cocoa.macosx.' }

def arch = System.getProperty("os.arch")
if (arch == "aarch64") { swtArtifact += 'aarch64' }
else if (arch == "amd64" || arch == "x86_64") { swtArtifact += 'x86_64' }
else { swtArtifact += 'x86' }


sourceSets {
    main {
		java.srcDirs = [ 'src' ]
        resources.srcDir 'resources'
    }
}

compileJava.options*.compilerArgs = [
    '-Xlint:all',
//    '-Werror'
    "--add-reads", "io.calimero.gui=ALL-UNNAMED" // usb4java-javax
]

tasks.named('compileJava') {
    options.javaModuleVersion = provider { project.version }
}

configurations {
    provided
    compile.extendsFrom provided    
}

configurations.configureEach {
    resolutionStrategy {
        dependencySubstitution {
            substitute module('org.eclipse.platform:org.eclipse.swt.${osgi.platform}') using module("${swtGroupId}:${swtArtifact}:${swtVersion}")
        }
    }
}

dependencies {
    implementation "io.calimero:calimero-core:${version}"
    implementation "io.calimero:calimero-tools:${version}"
    runtimeOnly("io.calimero:calimero-tools:${version}") {
        capabilities {
           requireCapability("io.calimero:calimero-tools-serial")
        }
    }
    runtimeOnly("io.calimero:calimero-tools:${version}") {
        capabilities {
           requireCapability("io.calimero:calimero-tools-usb")
        }
    }
    implementation "${swtGroupId}:${swtArtifact}:${swtVersion}"
    implementation 'org.usb4java:usb4java-javax:1.3.0'
}

java {
    withSourcesJar()
}

tasks.withType(Jar).configureEach {
    from("${projectDir}") {
        include 'LICENSE.txt'
        into "META-INF"
    }
    if (name.equals('sourcesJar')) {
        from("${projectDir}") {
            include 'README.md'
        }
    }
}

jar {
  dependsOn configurations.runtimeClasspath
  manifest {
    attributes(
      'Class-Path': (configurations.runtimeClasspath - configurations.provided + files('swt.jar')).collect { it.getName() }.join(' '),
      'Main-Class': application.mainClass
    )
  }
}

applicationDistribution.from(project.getProjectDir()) {
    include 'LICENSE.txt' 
//    include 'README.md'
}

distributions {
    main {
        contents {
            exclude configurations.provided.collect { it.getName() }.join(' ')
        }
    }
}

def addReads = [ '--add-reads', 'io.calimero.gui=ALL-UNNAMED', // usb4java
                 '--add-reads', 'io.calimero.core=io.calimero.tools', // @LinkEvent
                 '--add-reads', 'io.calimero.serial.provider.rxtx=ALL-UNNAMED',
                 '--add-reads', 'io.calimero.usb.provider.javax=ALL-UNNAMED' ]

startScripts {
    defaultJvmOpts = addReads
    doLast {
        // on OS X, SWT needs to run on first thread
        unixScript.text = unixScript.text.replace('DEFAULT_JVM_OPTS=\'', 
            'MACOS_JVM_OPTS=""\n' +
            'if [ "`uname`" = Darwin ] ; then\n' +
            '    MACOS_JVM_OPTS="-XstartOnFirstThread"\n' +
            'fi\n' +
            'DEFAULT_JVM_OPTS="${MACOS_JVM_OPTS}"\' ')
        // add dependency on downloaded swt.jar (adding files('swt.jar') to classpath doesn't work)
        unixScript.text = unixScript.text.replace('MODULE_PATH=$APP_HOME', 'MODULE_PATH=$APP_HOME/lib/swt.jar:$APP_HOME')
    }
}

tasks.withType(JavaExec).configureEach {
    jvmArgs += addReads
}

run {
    if (os.contains("mac")) { 
        jvmArgs '-XstartOnFirstThread' 
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = rootProject.name
            from components.java
            pom {
                name = 'Calimero GUI'
                description = 'A graphical user interface for the Calimero tools collection'
                url = 'https://github.com/calimero-project/calimero-gui'
                inceptionYear = '2006'
                licenses {
                    license {
                        name = "GNU General Public License, version 2, with the Classpath Exception"
                        url = 'LICENSE.txt'
                    }
                }
                developers {
                    developer {
                        name = "Boris Malinowsky"
                        email = "b.malinowsky@gmail.com"
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/calimero-project/calimero-gui.git'
                    url = 'https://github.com/calimero-project/calimero-gui.git'
                }
            }
        }
    }
    repositories {
        maven {
            name 'maven'
            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials(PasswordCredentials)
        }
    }
}

signing {
    if (project.hasProperty("signing.keyId")) {
        sign publishing.publications.mavenJava
    }
}
