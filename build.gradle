buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
        jcenter()
    }
    dependencies {
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.20.0'
    }
}

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
}

apply plugin:'java'
apply plugin:'application'
apply plugin:'com.github.ben-manes.versions'
apply plugin:'eclipse'

version = '2.4'

def date() {
    new Date().format('yyyyMMdd')
}

def buildClassifier = date()
distZip.classifier = buildClassifier
distTar.classifier = buildClassifier

sourceCompatibility = 1.8
targetCompatibility = 1.8

mainClassName = 'tuwien.auto.calimero.gui.SwtChecker'

// SWT is platform dependent
def swtGroupId = 'org.eclipse.platform'
def swtVersion = '3.109.0'
def swtArtifact = 'org.eclipse.swt.'

def os = System.getProperty("os.name").toLowerCase()
if (os.contains("windows")) { swtArtifact += 'win32.win32.x86_64' }
else if (os.contains("linux")) { swtArtifact += 'gtk.linux.x86_64' }
else if (os.contains("mac")) { swtArtifact += 'cocoa.macosx.x86_64' }


sourceSets {
    main {
		java.srcDirs = [ 'src' ]
        resources.srcDir 'resources'
    }
}

compileJava.options*.compilerArgs = [
    '-Xlint:all',
//    '-Werror'
]

configurations {
    provided
    compile.extendsFrom provided    
}

dependencies {
    implementation "com.github.calimero:calimero-core:${version}"
    implementation "com.github.calimero:calimero-tools:${version}"
    runtime "com.github.calimero:calimero-rxtx:${version}"
    provided("${swtGroupId}:${swtArtifact}:${swtVersion}") {
		exclude group: "${swtGroupId}", module: 'org.eclipse.swt' 
    }
    implementation 'org.slf4j:slf4j-api:1.8.0-beta2'
    runtime 'org.slf4j:slf4j-simple:1.8.0-beta2'
}

jar {
  dependsOn configurations.runtime
  manifest {
    attributes(
      'Class-Path': (configurations.runtime - configurations.provided + files('swt.jar')).collect { it.getName() }.join(' '),
      'Main-Class': mainClassName
    )
  }
}

applicationDistribution.from(project.getProjectDir()) {
    include 'LICENSE.txt' 
//    include 'README.md'
}

distributions {
    main {
        contents {
            exclude configurations.provided.collect { it.getName() }.join(' ')
        }
    }
}

startScripts {
    doLast {
        // on OS X, SWT needs to run on first thread
        unixScript.text = unixScript.text.replace('DEFAULT_JVM_OPTS=""', 
            'DEFAULT_JVM_OPTS=""\n' +
            'if [ "`uname`" = Darwin ] ; then\n' +
            '    DEFAULT_JVM_OPTS="-XstartOnFirstThread"\n' +
            'fi')
    }
}

run {
    if (os.contains("mac")) { 
        jvmArgs '-XstartOnFirstThread' 
    }
}
