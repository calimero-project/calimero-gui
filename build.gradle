plugins {
  id "com.github.ben-manes.versions" version "0.39.0"
  id 'maven-publish'
  id 'signing'
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
}

apply plugin:'java'
apply plugin:'application'
apply plugin:'com.github.ben-manes.versions'
apply plugin:'eclipse'

group = 'com.github.calimero'
version = '2.6-SNAPSHOT'

def date() {
    new Date().format('yyyyMMdd')
}

def buildClassifier = date()
distZip.classifier = buildClassifier
distTar.classifier = buildClassifier

sourceCompatibility = 11
targetCompatibility = 11

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'
javadoc.options.encoding = 'UTF-8'


mainClassName = 'tuwien.auto.calimero.gui.SwtChecker'

// SWT is platform dependent
def swtGroupId = 'org.eclipse.platform'
def swtVersion = '3.117.0'
def swtArtifact = 'org.eclipse.swt.'

def os = System.getProperty("os.name").toLowerCase()
if (os.contains("windows")) { swtArtifact += 'win32.win32.x86_64' }
else if (os.contains("linux")) { swtArtifact += 'gtk.linux.x86_64' }
else if (os.contains("mac")) { swtArtifact += 'cocoa.macosx.x86_64' }


sourceSets {
    main {
		java.srcDirs = [ 'src' ]
        resources.srcDir 'resources'
    }
}

compileJava.options*.compilerArgs = [
    '-Xlint:all',
//    '-Werror'
]

configurations {
    provided
    compile.extendsFrom provided    
}

configurations.all {
    resolutionStrategy {
        dependencySubstitution {
            substitute module('org.eclipse.platform:org.eclipse.swt.${osgi.platform}') with module("${swtGroupId}:${swtArtifact}:${swtVersion}")
        }
    }
}

dependencies {
    implementation "com.github.calimero:calimero-core:${version}"
    implementation "com.github.calimero:calimero-tools:${version}"
    implementation "${swtGroupId}:${swtArtifact}:${swtVersion}"
    runtimeOnly "com.github.calimero:calimero-rxtx:${version}"
    implementation 'org.slf4j:slf4j-api:1.7.30'
    runtimeOnly 'org.slf4j:slf4j-simple:1.7.30'
}

java {
    withSourcesJar()
}

tasks.withType(Jar) {
	from("${projectDir}") {
        include 'LICENSE.txt'
        into "META-INF"
    }
    if (name.equals('sourcesJar')) {
    	from("${projectDir}") {
		    include 'README.md'
        }
    }
}

jar {
  dependsOn configurations.runtimeClasspath
  manifest {
    attributes(
      'Class-Path': (configurations.runtimeClasspath - configurations.provided + files('swt.jar')).collect { it.getName() }.join(' '),
      'Main-Class': mainClassName
    )
  }
}

applicationDistribution.from(project.getProjectDir()) {
    include 'LICENSE.txt' 
//    include 'README.md'
}

distributions {
    main {
        contents {
            exclude configurations.provided.collect { it.getName() }.join(' ')
        }
    }
}

startScripts {
    doLast {
        // on OS X, SWT needs to run on first thread
        unixScript.text = unixScript.text.replace('DEFAULT_JVM_OPTS=""', 
            'DEFAULT_JVM_OPTS=""\n' +
            'if [ "`uname`" = Darwin ] ; then\n' +
            '    DEFAULT_JVM_OPTS="-XstartOnFirstThread"\n' +
            'fi')
    }
}

run {
    if (os.contains("mac")) { 
        jvmArgs '-XstartOnFirstThread' 
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = rootProject.name
            from components.java
            pom {
                name = 'Calimero GUI'
                description = 'A graphical user interface for the Calimero tools collection'
                url = 'https://github.com/calimero-project/calimero-gui'
                inceptionYear = '2006'
                licenses {
                    license {
                        name = "GNU General Public License, version 2, with the Classpath Exception"
                        url = 'LICENSE.txt'
                    }
                }
                developers {
                    developer {
                        name = "Boris Malinowsky"
                        email = "b.malinowsky@gmail.com"
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com:calimero-project/calimero-gui.git'
                    url = 'https://github.com/calimero-project/calimero-gui.git'
                }
            }
        }
    }
    repositories {
        maven {
            name 'maven'
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials(PasswordCredentials)
        }
    }
}

signing {
    if (project.hasProperty("signing.keyId")) {
        sign publishing.publications.mavenJava
    }
}
